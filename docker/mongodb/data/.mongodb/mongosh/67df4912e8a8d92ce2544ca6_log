{"t":{"$date":"2025-03-22T23:34:42.638Z"},"s":"I","c":"MONGOSH","id":1000000000,"ctx":"log","msg":"Starting log","attr":{"execPath":"/usr/bin/mongosh","envInfo":{"EDITOR":null,"NODE_OPTIONS":null,"TERM":null},"version":"2.3.8","distributionKind":"compiled","buildArch":"x64","buildPlatform":"linux","buildTarget":"linux-x64","buildTime":"2024-12-30T22:43:03.083Z","gitVersion":"0f0681f5ed67530071c9b3811cf5e18a222b9ae4","nodeVersion":"v20.18.1","opensslVersion":"3.0.15+quic","sharedOpenssl":false,"runtimeArch":"x64","runtimePlatform":"linux","runtimeGlibcVersion":"2.31","deps":{"nodeDriverVersion":"6.12.0","libmongocryptVersion":"1.11.0","libmongocryptNodeBindingsVersion":"6.1.0","kerberosVersion":"2.1.0"}}}
{"t":{"$date":"2025-03-22T23:34:42.649Z"},"s":"I","c":"MONGOSH","id":1000000005,"ctx":"config","msg":"User updated"}
{"t":{"$date":"2025-03-22T23:34:42.651Z"},"s":"I","c":"MONGOSH","id":1000000048,"ctx":"config","msg":"Loading global configuration file","attr":{"filename":"/etc/mongosh.conf","found":false}}
{"t":{"$date":"2025-03-22T23:34:42.812Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000049,"ctx":"mongosh-connect","msg":"Loaded system CA list","attr":{"caCount":293,"asyncFallbackError":null,"systemCertsError":null,"messages":[]}}
{"t":{"$date":"2025-03-22T23:34:42.834Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000042,"ctx":"mongosh-connect","msg":"Initiating connection attempt","attr":{"uri":"mongodb://<credentials>@127.0.0.1:27017/ml_platform?directConnection=true&serverSelectionTimeoutMS=2000&authSource=admin&appName=mongosh+2.3.8","driver":{"name":"nodejs|mongosh","version":"6.12.0|2.3.8"},"devtoolsConnectVersion":"3.3.4","host":"127.0.0.1:27017"}}
{"t":{"$date":"2025-03-22T23:34:42.844Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000035,"ctx":"mongosh-connect","msg":"Server heartbeat succeeded","attr":{"connectionId":"127.0.0.1:27017"}}
{"t":{"$date":"2025-03-22T23:34:42.876Z"},"s":"I","c":"DEVTOOLS-CONNECT","id":1000000037,"ctx":"mongosh-connect","msg":"Connection attempt finished"}
{"t":{"$date":"2025-03-22T23:34:42.912Z"},"s":"I","c":"MONGOSH","id":1000000004,"ctx":"connect","msg":"Connecting to server","attr":{"userId":null,"telemetryAnonymousId":"67ddf98025ea293175544ca5","connectionUri":"<mongodb uri><ip address>:27017/ml_platform?directConnection=true&serverSelectionTimeoutMS=2000&authSource=admin&appName=mongosh+2.3.8","mongosh_version":"2.3.8","session_id":"67df4912e8a8d92ce2544ca6","is_localhost":true,"is_do_url":false,"is_atlas_url":false,"is_atlas":false,"server_version":"5.0.31","node_version":"v20.18.1","server_os":"linux","server_arch":"x86_64","is_enterprise":false,"auth_type":null,"is_data_federation":false,"is_stream":false,"dl_version":null,"atlas_version":null,"is_genuine":true,"non_genuine_server_name":"mongodb","is_local_atlas":false,"fcv":"5.0","api_version":null,"api_strict":null,"api_deprecation_errors":null,"atlas_hostname":null}}
{"t":{"$date":"2025-03-22T23:34:42.915Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"ml_platform","arguments":{"cmd":{"ping":1}}}}
{"t":{"$date":"2025-03-22T23:34:42.917Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"ml_platform","arguments":{"db":"admin"}}}
{"t":{"$date":"2025-03-22T23:34:42.961Z"},"s":"I","c":"MONGOSH","id":1000000010,"ctx":"shell-api","msg":"Initialized context","attr":{"method":"setCtx","arguments":{}}}
{"t":{"$date":"2025-03-22T23:34:42.969Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"adminCommand","class":"Database","db":"ml_platform","arguments":{"cmd":{"getLog":"startupWarnings"}}}}
{"t":{"$date":"2025-03-22T23:34:42.970Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"getSiblingDB","class":"Database","db":"ml_platform","arguments":{"db":"admin"}}}
{"t":{"$date":"2025-03-22T23:34:42.971Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"hello","class":"Database","db":"ml_platform","arguments":{}}}
{"t":{"$date":"2025-03-22T23:34:42.973Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000024,"ctx":"snippets","msg":"Fetching snippet index","attr":{"refreshMode":"allow-cached"}}
{"t":{"$date":"2025-03-22T23:34:42.975Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000019,"ctx":"snippets","msg":"Loaded snippets","attr":{"installdir":"/data/db/.mongodb/mongosh/snippets"}}
{"t":{"$date":"2025-03-22T23:34:42.982Z"},"s":"I","c":"MONGOSH-SNIPPETS","id":1000000027,"ctx":"snippets","msg":"Fetching snippet index done"}
{"t":{"$date":"2025-03-22T23:34:42.984Z"},"s":"I","c":"MONGOSH","id":1000000002,"ctx":"repl","msg":"Started REPL","attr":{"version":"2.3.8"}}
{"t":{"$date":"2025-03-22T23:34:43.029Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Script d'initialisation pour MongoDB"}}
{"t":{"$date":"2025-03-22T23:34:43.260Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Ce script crée les collections nécessaires et ajoute des données initiales"}}
{"t":{"$date":"2025-03-22T23:34:43.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:43.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Création des collections"}}
{"t":{"$date":"2025-03-22T23:34:43.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"models\");"}}
{"t":{"$date":"2025-03-22T23:34:43.262Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ml_platform","arguments":{"name":"models","options":{}}}}
{"t":{"$date":"2025-03-22T23:34:43.278Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Collection already exists. NS: ml_platform.models","attr":{"errorResponse":{"ok":0,"errmsg":"Collection already exists. NS: ml_platform.models","code":48,"codeName":"NamespaceExists"},"ok":0,"code":48,"codeName":"NamespaceExists","message":"Collection already exists. NS: ml_platform.models","name":"MongoServerError","stack":"MongoServerError: Collection already exists. NS: ml_platform.models\n    at Connection.sendCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482329)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482990)\n    at async Server.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3733320)\n    at async CreateCollectionOperation.executeCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3671515)\n    at async CreateCollectionOperation.executeWithoutEncryptedFieldsCheck (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3674137)\n    at async CreateCollectionOperation.execute (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3673775)\n    at async topology (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3682873)\n    at async t.executeOperation (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3681397)\n    at async Db.createCollection (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3583067)","cause":null}}
{"t":{"$date":"2025-03-22T23:34:43.298Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"deployments\");"}}
{"t":{"$date":"2025-03-22T23:34:43.304Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ml_platform","arguments":{"name":"deployments","options":{}}}}
{"t":{"$date":"2025-03-22T23:34:43.335Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Collection already exists. NS: ml_platform.deployments","attr":{"errorResponse":{"ok":0,"errmsg":"Collection already exists. NS: ml_platform.deployments","code":48,"codeName":"NamespaceExists"},"ok":0,"code":48,"codeName":"NamespaceExists","message":"Collection already exists. NS: ml_platform.deployments","name":"MongoServerError","stack":"MongoServerError: Collection already exists. NS: ml_platform.deployments\n    at Connection.sendCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482329)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482990)\n    at async Server.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3733320)\n    at async CreateCollectionOperation.executeCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3671515)\n    at async CreateCollectionOperation.executeWithoutEncryptedFieldsCheck (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3674137)\n    at async CreateCollectionOperation.execute (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3673775)\n    at async topology (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3682873)\n    at async t.executeOperation (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3681397)\n    at async Db.createCollection (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3583067)","cause":null}}
{"t":{"$date":"2025-03-22T23:34:43.338Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"executions\");"}}
{"t":{"$date":"2025-03-22T23:34:43.378Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ml_platform","arguments":{"name":"executions","options":{}}}}
{"t":{"$date":"2025-03-22T23:34:43.381Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Collection already exists. NS: ml_platform.executions","attr":{"errorResponse":{"ok":0,"errmsg":"Collection already exists. NS: ml_platform.executions","code":48,"codeName":"NamespaceExists"},"ok":0,"code":48,"codeName":"NamespaceExists","message":"Collection already exists. NS: ml_platform.executions","name":"MongoServerError","stack":"MongoServerError: Collection already exists. NS: ml_platform.executions\n    at Connection.sendCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482329)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482990)\n    at async Server.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3733320)\n    at async CreateCollectionOperation.executeCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3671515)\n    at async CreateCollectionOperation.executeWithoutEncryptedFieldsCheck (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3674137)\n    at async CreateCollectionOperation.execute (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3673775)\n    at async topology (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3682873)\n    at async t.executeOperation (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3681397)\n    at async Db.createCollection (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3583067)","cause":null}}
{"t":{"$date":"2025-03-22T23:34:43.580Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.createCollection(\"users\");"}}
{"t":{"$date":"2025-03-22T23:34:43.585Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"createCollection","class":"Database","db":"ml_platform","arguments":{"name":"users","options":{}}}}
{"t":{"$date":"2025-03-22T23:34:43.586Z"},"s":"E","c":"MONGOSH","id":1000000006,"ctx":"repl","msg":"MongoServerError: Collection already exists. NS: ml_platform.users","attr":{"errorResponse":{"ok":0,"errmsg":"Collection already exists. NS: ml_platform.users","code":48,"codeName":"NamespaceExists"},"ok":0,"code":48,"codeName":"NamespaceExists","message":"Collection already exists. NS: ml_platform.users","name":"MongoServerError","stack":"MongoServerError: Collection already exists. NS: ml_platform.users\n    at Connection.sendCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482329)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3482990)\n    at async Server.command (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3733320)\n    at async CreateCollectionOperation.executeCommand (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3671515)\n    at async CreateCollectionOperation.executeWithoutEncryptedFieldsCheck (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3674137)\n    at async CreateCollectionOperation.execute (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3673775)\n    at async topology (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3682873)\n    at async t.executeOperation (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3681397)\n    at async Db.createCollection (eval at module.exports (node:lib-boxednode/mongosh:103:20), <anonymous>:3:3583067)","cause":null}}
{"t":{"$date":"2025-03-22T23:34:43.586Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:43.586Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Création d'un utilisateur administrateur"}}
{"t":{"$date":"2025-03-22T23:34:43.587Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.users.insertOne({\n  username: \"admin\",\n  email: \"<email>\",\n  full_name: \"Administrateur\",\n  department: \"IT\",\n  region: \"Global\",\n  role: \"admin\",\n  hashed_password: \"$2b$12$K3JNi5XYmJTKhMJbKyBNJeJDzxOvpgx7hkGMPeZ8tBDMLSQ7jfnge\", // mot de passe: admin123\n  is_active: true,\n  created_at: new Date(),\n  updated_at: new Date()\n});"}}
{"t":{"$date":"2025-03-22T23:34:43.587Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertOne","class":"Collection","db":"ml_platform","coll":"users","arguments":{"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:43.612Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:44.201Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Insertion de quelques modèles de démonstration"}}
{"t":{"$date":"2025-03-22T23:34:44.208Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.models.insertMany([\n  {\n    name: \"Prévision des ventes\",\n    description: \"Ce modèle utilise des séries temporelles pour prédire les ventes futures basées sur les données historiques et les facteurs saisonniers.\",\n    type: \"forecasting\",\n    framework: \"scikit-learn\",\n    version: \"1.2.0\",\n    tags: [\"ventes\", \"prévision\", \"série temporelle\"],\n    parameters: {\n      features: [\"date\", \"produit\", \"région\", \"prix\", \"promotion\"],\n      algorithm: \"Prophet\",\n      hyperparameters: {\n        seasonality_mode: \"multiplicative\",\n        changepoint_prior_scale: 0.05\n      }\n    },\n    metadata: {\n      author: \"Jean Dupont\",\n      team: \"Data Science - Ventes\"\n    },\n    owner_id: \"user123\",\n    department: \"Ventes\",\n    region: \"Europe\",\n    brand: \"Marque A\",\n    status: \"deployed\",\n    file_path: \"models/model1/model.pkl\",\n    created_at: new Date(),\n    updated_at: new Date()\n  },\n  {\n    name: \"Segmentation clients\",\n    description: \"Modèle de clustering pour segmenter les clients en fonction de leur comportement d'achat et de leurs caractéristiques démographiques.\",\n    type: \"clustering\",\n    framework: \"tensorflow\",\n    version: \"2.0.1\",\n    tags: [\"marketing\", \"segmentation\", \"clients\"],\n    parameters: {\n      features: [\"âge\", \"revenu\", \"fréquence_achat\", \"montant_moyen\", \"catégories_préférées\"],\n      algorithm: \"K-Means\",\n      hyperparameters: {\n        n_clusters: 5,\n        random_state: 42\n      }\n    },\n    metadata: {\n      author: \"Marie Martin\",\n      team: \"Data Science - Marketing\"\n    },\n    owner_id: \"user456\",\n    department: \"Marketing\",\n    region: \"Amérique du Nord\",\n    brand: \"Marque B\",\n    status: \"ready\",\n    file_path: \"models/model2/model.h5\",\n    created_at: new Date(),\n    updated_at: new Date()\n  },\n  {\n    name: \"Détection de fraude\",\n    description: \"Modèle de classification pour détecter les transactions frauduleuses en temps réel.\",\n    type: \"classification\",\n    framework: \"pytorch\",\n    version: \"1.0.5\",\n    tags: [\"finance\", \"fraude\", \"sécurité\"],\n    parameters: {\n      features: [\"montant\", \"localisation\", \"heure\", \"appareil\", \"historique\"],\n      algorithm: \"Random Forest\",\n      hyperparameters: {\n        n_estimators: 100,\n        max_depth: 10,\n        min_samples_split: 5\n      }\n    },\n    metadata: {\n      author: \"Pierre Dubois\",\n      team: \"Data Science - Finance\"\n    },\n    owner_id: \"user789\",\n    department: \"Finance\",\n    region: \"Global\",\n    brand: null,\n    status: \"deployed\",\n    file_path: \"models/model3/model.pt\",\n    created_at: new Date(),\n    updated_at: new Date()\n  }\n]);"}}
{"t":{"$date":"2025-03-22T23:34:44.209Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"ml_platform","coll":"models","arguments":{"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.228Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:44.261Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Récupération des IDs des modèles"}}
{"t":{"$date":"2025-03-22T23:34:44.265Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var salesModelId = db.models.findOne({name: \"Prévision des ventes\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.268Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"models","arguments":{"query":{"name":"Prévision des ventes"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.287Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var segmentationModelId = db.models.findOne({name: \"Segmentation clients\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.291Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"models","arguments":{"query":{"name":"Segmentation clients"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.312Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var fraudModelId = db.models.findOne({name: \"Détection de fraude\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.319Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"models","arguments":{"query":{"name":"Détection de fraude"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.336Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:44.643Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Insertion de quelques déploiements de démonstration"}}
{"t":{"$date":"2025-03-22T23:34:44.648Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.deployments.insertMany([\n  {\n    model_id: salesModelId,\n    name: \"Déploiement Europe - Prévision des ventes\",\n    description: \"Déploiement du modèle de prévision des ventes pour l'Europe\",\n    parameters: {\n      input_data_path: \"data/ventes/europe/\",\n      output_data_path: \"results/ventes/europe/\",\n      batch_size: 64\n    },\n    schedule: \"0 8 * * 1\",\n    owner_id: \"user123\",\n    status: \"running\",\n    dag_id: \"model_sales_forecast_europe\",\n    created_at: new Date(),\n    updated_at: new Date()\n  },\n  {\n    model_id: segmentationModelId,\n    name: \"Déploiement global - Segmentation clients\",\n    description: \"Déploiement du modèle de segmentation clients pour toutes les régions\",\n    parameters: {\n      input_data_path: \"data/clients/global/\",\n      output_data_path: \"results/clients/global/\",\n      batch_size: 128\n    },\n    schedule: \"0 0 * * *\",\n    owner_id: \"user456\",\n    status: \"running\",\n    dag_id: \"model_customer_segmentation_global\",\n    created_at: new Date(),\n    updated_at: new Date()\n  },\n  {\n    model_id: fraudModelId,\n    name: \"Déploiement Finance - Détection de fraude\",\n    description: \"Déploiement du modèle de détection de fraude pour le département Finance\",\n    parameters: {\n      input_data_path: \"data/transactions/\",\n      output_data_path: \"results/fraude/\",\n      threshold: 0.85,\n      real_time: true\n    },\n    schedule: null,\n    owner_id: \"user789\",\n    status: \"running\",\n    dag_id: \"model_fraud_detection_finance\",\n    created_at: new Date(),\n    updated_at: new Date()\n  }\n]);"}}
{"t":{"$date":"2025-03-22T23:34:44.704Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"ml_platform","coll":"deployments","arguments":{"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.705Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:44.707Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Récupération des IDs des déploiements"}}
{"t":{"$date":"2025-03-22T23:34:44.707Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var salesDeploymentId = db.deployments.findOne({name: \"Déploiement Europe - Prévision des ventes\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.723Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"deployments","arguments":{"query":{"name":"Déploiement Europe - Prévision des ventes"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.725Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var segmentationDeploymentId = db.deployments.findOne({name: \"Déploiement global - Segmentation clients\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.725Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"deployments","arguments":{"query":{"name":"Déploiement global - Segmentation clients"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.741Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"var fraudDeploymentId = db.deployments.findOne({name: \"Déploiement Finance - Détection de fraude\"})._id;"}}
{"t":{"$date":"2025-03-22T23:34:44.746Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"findOne","class":"Collection","db":"ml_platform","coll":"deployments","arguments":{"query":{"name":"Déploiement Finance - Détection de fraude"},"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:44.765Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:45.096Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"// Insertion de quelques exécutions de démonstration"}}
{"t":{"$date":"2025-03-22T23:34:45.101Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"db.executions.insertMany([\n  {\n    deployment_id: salesDeploymentId,\n    model_id: salesModelId,\n    parameters: {\n      date_debut: \"2025-01-01\",\n      date_fin: \"2025-03-31\"\n    },\n    owner_id: \"user123\",\n    status: \"success\",\n    start_time: new Date(new Date().getTime() - 7*24*60*60*1000),\n    end_time: new Date(new Date().getTime() - 7*24*60*60*1000 + 10*60*1000),\n    result_path: \"results/ventes/europe/execution_20250315.csv\",\n    logs: [\"Exécution démarrée\", \"Chargement des données\", \"Prédiction effectuée\", \"Résultats sauvegardés\", \"Exécution terminée avec succès\"],\n    created_at: new Date(new Date().getTime() - 7*24*60*60*1000)\n  },\n  {\n    deployment_id: segmentationDeploymentId,\n    model_id: segmentationModelId,\n    parameters: {\n      filter: \"nouveaux_clients\"\n    },\n    owner_id: \"user456\",\n    status: \"success\",\n    start_time: new Date(new Date().getTime() - 1*24*60*60*1000),\n    end_time: new Date(new Date().getTime() - 1*24*60*60*1000 + 15*60*1000),\n    result_path: \"results/clients/global/segmentation_20250320.json\",\n    logs: [\"Exécution démarrée\", \"Chargement des données clients\", \"Prétraitement\", \"Clustering effectué\", \"Résultats sauvegardés\", \"Exécution terminée avec succès\"],\n    created_at: new Date(new Date().getTime() - 1*24*60*60*1000)\n  },\n  {\n    deployment_id: fraudDeploymentId,\n    model_id: fraudModelId,\n    parameters: {\n      batch: \"transactions_20250319\"\n    },\n    owner_id: \"user789\",\n    status: \"failed\",\n    start_time: new Date(new Date().getTime() - 2*24*60*60*1000),\n    end_time: new Date(new Date().getTime() - 2*24*60*60*1000 + 3*60*1000),\n    result_path: null,\n    logs: [\"Exécution démarrée\", \"Chargement des données\", \"Erreur: Données incomplètes\", \"Exécution échouée\"],\n    created_at: new Date(new Date().getTime() - 2*24*60*60*1000)\n  }\n]);"}}
{"t":{"$date":"2025-03-22T23:34:45.101Z"},"s":"I","c":"MONGOSH","id":1000000011,"ctx":"shell-api","msg":"Performed API call","attr":{"method":"insertMany","class":"Collection","db":"ml_platform","coll":"executions","arguments":{"options":{}}}}
{"t":{"$date":"2025-03-22T23:34:45.126Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":""}}
{"t":{"$date":"2025-03-22T23:34:45.140Z"},"s":"I","c":"MONGOSH","id":1000000007,"ctx":"repl","msg":"Evaluating input","attr":{"input":"print(\"Initialisation de MongoDB terminée avec succès\");"}}
{"t":{"$date":"2025-03-22T23:34:45.151Z"},"s":"I","c":"MONGOSH","id":1000000045,"ctx":"analytics","msg":"Flushed outstanding data","attr":{"flushError":"Trying to persist throttle state before userId is set","flushDuration":0}}
